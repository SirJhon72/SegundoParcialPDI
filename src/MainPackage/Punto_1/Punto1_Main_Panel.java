/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage.Punto_1;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Fer
 */
public class Punto1_Main_Panel extends javax.swing.JPanel {
    JLabel label, Olabel, Flabel;
    JScrollPane scroll, Oscroll, Fscroll;
    
    BufferedImage imagen = null;
    BufferedImage imagen2 = null;
    BufferedImage imagen3 = null;
    BufferedImage imagen4 = null;
    File imagenSeleccionada, imagensel2, imagensel3;
    Color arreglo[][], arregloCol[][], arregloNoMod[][], bordes[][], grises[][], arregloimg3[][];
    int contador = 0;
    int valor=0;
    
    /*Creamos la variable que contendrá el histograma
         El primer campo [0], almacenará el histograma Rojo
         [1]=verde [2]=azul  [3]=escala grises*/
        final double histogramaReturn[][] = new double[4][256];

    /**
     * Creates new form Punto1_Main_Panel
     */
    public Punto1_Main_Panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jButton1.setText("Cargar imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sobel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Laplace 4");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Laplace -4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Laplace 8");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Laplace -8");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Laplace rotado");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jLabel1.setText("Blanco y negro");

        jLabel4.setText("Bordes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1305, 1305, 1305)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(900, 900, 900)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jLabel4)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton7))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void Todo (){
        //Imagen original
        label = new JLabel();
        label.setBounds(30, 30, 430, 300);
        
        scroll = new JScrollPane();
        scroll.setBounds(30, 30, 430, 300);
        scroll.setViewportView(label);
        this.add(scroll);
        
        //Blanco negro
        
        Olabel = new JLabel();
        Olabel.setBounds(520, 30, 430, 300);
        
        Oscroll = new JScrollPane();
        Oscroll.setBounds(520, 30, 430, 300);
        Oscroll.setViewportView(Olabel);
        this.add(Oscroll);
        
        //Bordes
        
        Flabel = new JLabel();
        Flabel.setBounds(520, 335, 430, 300);
        
        Fscroll = new JScrollPane();
        Fscroll.setBounds(520, 335, 430, 300);
        Fscroll.setViewportView(Flabel);
        this.add(Fscroll);
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        double[] x = new double[256];
                if (contador == 1) {
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        Color colorAuxiliar = null;
                        for (int i = 0; i < 256; i++) {
                                    //Sumamos una unidad en la fila roja [0], 
                                //en la columna del color rojo obtenido
                                histogramaReturn[0][i]=0;
                                histogramaReturn[1][i]=0;
                                histogramaReturn[2][i]=0;
                                histogramaReturn[3][i]=0;
                        }
                        //Recorremos la imagen
                        for (int i = 1; i < imagen.getWidth(); i++) {
                            for (int j = 1; j < imagen.getHeight(); j++) {
                                //Obtenemos color del píxel actual
                                colorAuxiliar = new Color(imagen.getRGB(i, j));
                                    //Sumamos una unidad en la fila roja [0], 
                                //en la columna del color rojo obtenido
                                histogramaReturn[0][colorAuxiliar.getRed()]++;
                                histogramaReturn[1][colorAuxiliar.getGreen()]++;
                                histogramaReturn[2][colorAuxiliar.getBlue()]++;
                            }
                        }
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        arregloNoMod = new Color[imagen.getHeight()][imagen.getWidth()];
                        arregloCol = new Color[imagen.getHeight()][imagen.getWidth()];
                        bordes = new Color[imagen.getHeight()][imagen.getWidth()];
                        grises = new Color[imagen.getHeight()][imagen.getWidth()];
                        arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                                arregloNoMod[i][j] = new Color(imagen.getRGB(j, i));
                                arregloCol[i][j] = new Color(imagen.getRGB(j, i));
                                grises[i][j] = new Color(imagen2.getRGB(j, i));
                                bordes[i][j] = Color.WHITE;
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                    for (int i = 0; i < imagen3.getHeight(); i++) {
                        for (int j = 0; j < imagen3.getWidth(); j++) {
                            imagen3.setRGB(j, i, 255);
                        }
                    }
                } else {
                    contador = 1;
                    JFileChooser Buscar = new JFileChooser();
                    FileNameExtensionFilter extension = new FileNameExtensionFilter("JPG &  BMP & PNG", "jpg", "bmp", "png");
                    Buscar.setFileFilter(extension);
                    int flag = Buscar.showOpenDialog(null);
                    //Comprobamos que pulse en aceptar
                    if (flag == JFileChooser.APPROVE_OPTION) {
                        try {
                            //Devuelve el fichero seleccionado
                            imagenSeleccionada = Buscar.getSelectedFile();
                            //Asignamos a la variable bmp la imagen leida
                            imagen = ImageIO.read(imagenSeleccionada);
                            imagen2 = ImageIO.read(imagenSeleccionada);
                            imagen3 = ImageIO.read(imagenSeleccionada);
                            imagen4 = ImageIO.read(imagenSeleccionada);
                        } catch (IOException e) {

                        }
                        label.setIcon(new ImageIcon(imagen));
                        Color colorAuxiliar = null;
                        //Recorremos la imagen
                        for (int i = 1; i < imagen.getWidth(); i++) {
                            for (int j = 1; j < imagen.getHeight(); j++) {
                                //Obtenemos color del píxel actual
                                colorAuxiliar = new Color(imagen.getRGB(i, j));
                                    //Sumamos una unidad en la fila roja [0], 
                                //en la columna del color rojo obtenido
                                histogramaReturn[0][colorAuxiliar.getRed()]++;
                                histogramaReturn[1][colorAuxiliar.getGreen()]++;
                                histogramaReturn[2][colorAuxiliar.getBlue()]++;
                            }
                        }
                        //Se vacían los pixeles a un arreglo de Colores
                        arreglo = new Color[imagen.getHeight()][imagen.getWidth()];
                        arregloNoMod = new Color[imagen.getHeight()][imagen.getWidth()];
                        arregloCol = new Color[imagen.getHeight()][imagen.getWidth()];
                        bordes = new Color[imagen.getHeight()][imagen.getWidth()];
                        grises = new Color[imagen.getHeight()][imagen.getWidth()];
                        for (int i = 0; i < imagen.getHeight(); i++) {
                            for (int j = 0; j < imagen.getWidth(); j++) {
                                arreglo[i][j] = new Color(imagen.getRGB(j, i));
                                arregloNoMod[i][j] = new Color(imagen.getRGB(j, i));
                                arregloCol[i][j] = new Color(imagen.getRGB(j, i));
                                grises[i][j] = new Color(imagen.getRGB(j, i));
                                bordes[i][j] = Color.WHITE;
                            }
                        }
                        for (int i = 0; i < 256; i++) {
                            x[i] = (double) i;
                        }
                    }
                }
                //Convertir a escala de grises
                for (int y = 0; y < imagen2.getHeight(); y++) {
                    for (int j = 0; j < imagen2.getWidth(); j++) {
                        int p = imagen2.getRGB(j, y);

                        int a = (p >> 24) & 0xff;
                        int r = (p >> 16) & 0xff;
                        int g = (p >> 8) & 0xff;
                        int b = p & 0xff;

                        int avg = (r + g + b) / 3;
                            
                        p = (a << 24) | (avg << 16) | (avg << 8) | avg;

                        imagen2.setRGB(j, y, p);
                    }
                }
                Olabel.setIcon(new ImageIcon(imagen2));
                for (int i = 0; i < imagen.getHeight(); i++) {
                    for (int j = 0; j < imagen.getWidth(); j++) {
                        grises[i][j] = new Color(imagen2.getRGB(j, i));
                    }
                }
    }//GEN-LAST:event_jButton1ActionPerformed
//110
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double izquierda=0, derecha=0, total=0, arribaI=0, abajoD=0, izquierdaAb=0, derechaAr=0, arriba=0, abajo=0;
                double r1=0, r2=0, sub1=0, sub2=0, sub3, sub4, subtotal=0, m1=0, m2=0;
                //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        Color pArriba= grises[i-1][j];
                        Color pAbajo = grises[i+1][j];
                        Color pix = grises[i][j];
                        Color pIzquierda = grises[i][j-1];
                        Color pArribaI= grises[i-1][j-1];
                        Color pIzquierdaAb = grises[i+1][j-1];
                        Color pAbajoD = grises[i+1][j+1];
                        Color pDerecha = grises[i][j+1];
                        Color pDerechaAr = grises[i-1][j+1];
                        arriba = ((pArriba.getRed()+pArriba.getGreen()+pArriba.getBlue())/3);
                        abajo = ((pAbajo.getRed()+pAbajo.getGreen()+pAbajo.getBlue())/3);
                        izquierda = ((pIzquierda.getRed()+pIzquierda.getGreen()+pIzquierda.getBlue())/3);
                        arribaI = ((pArribaI.getRed()+pArribaI.getGreen()+pArribaI.getBlue())/3);
                        izquierdaAb = ((pIzquierdaAb.getRed()+pIzquierdaAb.getGreen()+pIzquierdaAb.getBlue())/3);
                        derecha = ((pDerecha.getRed()+pDerecha.getGreen()+pDerecha.getBlue())/3);
                        abajoD = ((pAbajoD.getRed()+pAbajoD.getGreen()+pAbajoD.getBlue())/3);
                        derechaAr = ((pDerechaAr.getRed()+pDerechaAr.getGreen()+pDerechaAr.getBlue())/3);
                        sub1 = izquierda*-2+arribaI*-1+izquierdaAb*-1;
                        sub2 = derecha*2+abajoD+derechaAr;
                        r1 = sub1+sub2;
                        sub3 = arriba*-2+arribaI*-1+derechaAr*-1;
                        sub4 = abajo*2+abajoD+izquierdaAb;
                        r2 = sub3+sub4;
                        m1 = r1*r1;
                        m2 = r2*r2;
                        subtotal=m1+m2;
                        total = Math.sqrt(subtotal);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<100)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                /* Asginaciones de color 
        for(int i = 1; i < original.getWidth() - 1; i++){
            for(int j = 1; j < original.getHeight() -1 ; j++){
                int ColorBorde = preImagen[i][j];
                
                /* Con esto eliminamos la comprobacion de 0 a 255
                ColorBorde = (int)(escala*ColorBorde);
                /* Creamos un nuevo color 
                ColorBorde = 0xff000000 | (ColorBorde << 16) | (ColorBorde << 8) | ColorBorde;
                /* Asignamos el color 
                copia.setRGB(i, j, ColorBorde);
            }
        }*/
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        double centro=0, arriba=0, abajo=0, izquierda=0, derecha=0, total=0; 
                        Color pix = grises[i][j];
                        Color pArriba= grises[i-1][j];
                        Color pAbajo = grises[i+1][j];
                        Color pIzquierda = grises[i][j-1];
                        Color pDerecha = grises[i][j+1];
                        centro = ((pix.getRed()+pix.getGreen()+pix.getBlue())/3)*4;
                        arriba = ((pArriba.getRed()+pArriba.getGreen()+pArriba.getBlue())/3)*-1;
                        abajo = ((pAbajo.getRed()+pAbajo.getGreen()+pAbajo.getBlue())/3)*-1;
                        izquierda = ((pIzquierda.getRed()+pIzquierda.getGreen()+pIzquierda.getBlue())/3)*-1;
                        derecha = ((pDerecha.getRed()+pDerecha.getGreen()+pDerecha.getBlue())/3)*-1;
                        total = (centro+arriba+abajo+izquierda+derecha);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<60)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        double centro=0, arriba=0, abajo=0, izquierda=0, derecha=0, total=0; 
                        Color pix = grises[i][j];
                        Color pArriba= grises[i-1][j];
                        Color pAbajo = grises[i+1][j];
                        Color pIzquierda = grises[i][j-1];
                        Color pDerecha = grises[i][j+1];
                        centro = ((pix.getRed()+pix.getGreen()+pix.getBlue())/3)*-4;
                        arriba = ((pArriba.getRed()+pArriba.getGreen()+pArriba.getBlue())/3);
                        abajo = ((pAbajo.getRed()+pAbajo.getGreen()+pAbajo.getBlue())/3);
                        izquierda = ((pIzquierda.getRed()+pIzquierda.getGreen()+pIzquierda.getBlue())/3);
                        derecha = ((pDerecha.getRed()+pDerecha.getGreen()+pDerecha.getBlue())/3);
                        total = (centro+arriba+abajo+izquierda+derecha);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<60)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        double centro=0, arriba=0, abajo=0, izquierda=0, derecha=0, total=0, arribaI=0, abajoD=0, izquierdaAb=0, derechaAr=0; 
                        Color pix = grises[i][j];
                        Color pArriba= grises[i-1][j];
                        Color pAbajo = grises[i+1][j];
                        Color pIzquierda = grises[i][j-1];
                        Color pDerecha = grises[i][j+1];
                        Color pArribaI= grises[i-1][j-1];
                        Color pAbajoD = grises[i+1][j+1];
                        Color pIzquierdaAb = grises[i-1][j-1];
                        Color pDerechaAr = grises[i+1][j+1];
                        centro = ((pix.getRed()+pix.getGreen()+pix.getBlue())/3)*-8;
                        arriba = ((pArriba.getRed()+pArriba.getGreen()+pArriba.getBlue())/3);
                        abajo = ((pAbajo.getRed()+pAbajo.getGreen()+pAbajo.getBlue())/3);
                        izquierda = ((pIzquierda.getRed()+pIzquierda.getGreen()+pIzquierda.getBlue())/3);
                        derecha = ((pDerecha.getRed()+pDerecha.getGreen()+pDerecha.getBlue())/3);
                        arribaI = ((pArribaI.getRed()+pArribaI.getGreen()+pArribaI.getBlue())/3);
                        abajoD = ((pAbajoD.getRed()+pAbajoD.getGreen()+pAbajoD.getBlue())/3);
                        izquierdaAb = ((pIzquierdaAb.getRed()+pIzquierdaAb.getGreen()+pIzquierdaAb.getBlue())/3);
                        derechaAr = ((pDerechaAr.getRed()+pDerechaAr.getGreen()+pDerechaAr.getBlue())/3);
                        total = (centro+arriba+abajo+izquierda+derecha+arribaI+abajoD+izquierdaAb+derechaAr);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<80)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        double centro=0, arriba=0, abajo=0, izquierda=0, derecha=0, total=0, arribaI=0, abajoD=0, izquierdaAb=0, derechaAr=0; 
                        Color pix = grises[i][j];
                        Color pArriba= grises[i-1][j];
                        Color pAbajo = grises[i+1][j];
                        Color pIzquierda = grises[i][j-1];
                        Color pDerecha = grises[i][j+1];
                        Color pArribaI= grises[i-1][j-1];
                        Color pAbajoD = grises[i+1][j+1];
                        Color pIzquierdaAb = grises[i-1][j-1];
                        Color pDerechaAr = grises[i+1][j+1];
                        centro = ((pix.getRed()+pix.getGreen()+pix.getBlue())/3)*8;
                        arriba = ((pArriba.getRed()+pArriba.getGreen()+pArriba.getBlue())/3)*-1;
                        abajo = ((pAbajo.getRed()+pAbajo.getGreen()+pAbajo.getBlue())/3)*-1;
                        izquierda = ((pIzquierda.getRed()+pIzquierda.getGreen()+pIzquierda.getBlue())/3)*-1;
                        derecha = ((pDerecha.getRed()+pDerecha.getGreen()+pDerecha.getBlue())/3)*-1;
                        arribaI = ((pArribaI.getRed()+pArribaI.getGreen()+pArribaI.getBlue())/3)*-1;
                        abajoD = ((pAbajoD.getRed()+pAbajoD.getGreen()+pAbajoD.getBlue())/3)*-1;
                        izquierdaAb = ((pIzquierdaAb.getRed()+pIzquierdaAb.getGreen()+pIzquierdaAb.getBlue())/3)*-1;
                        derechaAr = ((pDerechaAr.getRed()+pDerechaAr.getGreen()+pDerechaAr.getBlue())/3)*-1;
                        total = (centro+arriba+abajo+izquierda+derecha+arribaI+abajoD+izquierdaAb+derechaAr);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<80)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //programar Laplace.
                for (int j = 1; j < imagen3.getWidth()-1; j++) {
                    for (int i = 1; i < imagen3.getHeight()-1; i++) {
                        double centro=0, total=0, arribaI=0, abajoD=0, izquierdaAb=0, derechaAr=0;
                        Color pix = grises[i][j];
                        Color pArribaI= grises[i-1][j-1];
                        Color pAbajoD = grises[i+1][j+1];
                        Color pIzquierdaAb = grises[i-1][j-1];
                        Color pDerechaAr = grises[i+1][j+1];
                        centro = ((pix.getRed()+pix.getGreen()+pix.getBlue())/3)*-4;
                        arribaI = ((pArribaI.getRed()+pArribaI.getGreen()+pArribaI.getBlue())/3);
                        abajoD = ((pAbajoD.getRed()+pAbajoD.getGreen()+pAbajoD.getBlue())/3);
                        izquierdaAb = ((pIzquierdaAb.getRed()+pIzquierdaAb.getGreen()+pIzquierdaAb.getBlue())/3);
                        derechaAr = ((pDerechaAr.getRed()+pDerechaAr.getGreen()+pDerechaAr.getBlue())/3);
                        total = (centro+arribaI+abajoD+izquierdaAb+derechaAr);
                        if(total<0) 
                            total=0;
                        if(total>255)
                            total=255;
                        if(total>0&&total<60)
                            total=0;
                        imagen3.setRGB(j, i, (int) total);
                    }
                }
                arregloimg3 = new Color[imagen.getHeight()][imagen.getWidth()];
                Color myWhite = new Color(255, 255, 255); // Color white
                int rgb = myWhite.getRGB();
                int prom;
                    for (int i = 0; i < imagen.getHeight(); i++) {
                        for (int j = 0; j < imagen.getWidth(); j++) {
                            arregloimg3[i][j] = new Color(imagen3.getRGB(j, i));
                            prom = (int) (arregloimg3[i][j].getRed()+arregloimg3[i][j].getBlue()+arregloimg3[i][j].getGreen())/3;
                            if(prom!=0){
                                imagen3.setRGB(j, i, rgb);
                            }
                        }
                    }
                Flabel.setIcon(new ImageIcon(imagen3));
    }//GEN-LAST:event_jButton7ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
